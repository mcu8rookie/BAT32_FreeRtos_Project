<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BAT32_FreeRTOS_Proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BAT32_FreeRTOS_Proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Feb 19 18:16:36 2025
<BR><P>
<H3>Maximum Stack Usage =       1112 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; flash_write &rArr; ProgramPage
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">HardFault_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[b]">IRQ00_Handler</a> from isr_bat32a237.o(i.IRQ00_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[c]">IRQ01_Handler</a> from isr_bat32a237.o(i.IRQ01_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[d]">IRQ02_Handler</a> from isr_bat32a237.o(i.IRQ02_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[e]">IRQ03_Handler</a> from isr_bat32a237.o(i.IRQ03_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[f]">IRQ04_Handler</a> from isr_bat32a237.o(i.IRQ04_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[10]">IRQ05_Handler</a> from isr_bat32a237.o(i.IRQ05_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[11]">IRQ06_Handler</a> from isr_bat32a237.o(i.IRQ06_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[12]">IRQ07_Handler</a> from isr_bat32a237.o(i.IRQ07_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[13]">IRQ08_Handler</a> from isr_bat32a237.o(i.IRQ08_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[14]">IRQ09_Handler</a> from isr_bat32a237.o(i.IRQ09_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[15]">IRQ10_Handler</a> from isr_bat32a237.o(i.IRQ10_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[16]">IRQ11_Handler</a> from isr_bat32a237.o(i.IRQ11_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[17]">IRQ12_Handler</a> from isr_bat32a237.o(i.IRQ12_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[18]">IRQ13_Handler</a> from isr_bat32a237.o(i.IRQ13_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[19]">IRQ14_Handler</a> from isr_bat32a237.o(i.IRQ14_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1a]">IRQ15_Handler</a> from isr_bat32a237.o(i.IRQ15_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1b]">IRQ16_Handler</a> from isr_bat32a237.o(i.IRQ16_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1c]">IRQ17_Handler</a> from isr_bat32a237.o(i.IRQ17_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1d]">IRQ18_Handler</a> from isr_bat32a237.o(i.IRQ18_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1e]">IRQ19_Handler</a> from isr_bat32a237.o(i.IRQ19_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1f]">IRQ20_Handler</a> from isr_bat32a237.o(i.IRQ20_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[20]">IRQ21_Handler</a> from isr_bat32a237.o(i.IRQ21_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[21]">IRQ22_Handler</a> from isr_bat32a237.o(i.IRQ22_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[22]">IRQ23_Handler</a> from isr_bat32a237.o(i.IRQ23_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[23]">IRQ24_Handler</a> from isr_bat32a237.o(i.IRQ24_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[24]">IRQ25_Handler</a> from isr_bat32a237.o(i.IRQ25_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[25]">IRQ26_Handler</a> from isr_bat32a237.o(i.IRQ26_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[26]">IRQ27_Handler</a> from isr_bat32a237.o(i.IRQ27_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[27]">IRQ28_Handler</a> from isr_bat32a237.o(i.IRQ28_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[28]">IRQ29_Handler</a> from isr_bat32a237.o(i.IRQ29_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[29]">IRQ30_Handler</a> from isr_bat32a237.o(i.IRQ30_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2a]">IRQ31_Handler</a> from isr_bat32a237.o(i.IRQ31_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_bat32a237.o(i.SystemInit) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[2f]">__main</a> from __main.o(!!!main) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[2e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2d]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[32]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[114]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[115]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[116]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[50]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[33]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[34]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[36]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[117]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[118]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[119]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[120]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[121]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[122]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[124]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[125]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[126]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[127]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[128]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[129]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[12d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[12e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[31]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[132]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[38]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[133]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; flash_write &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[134]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[135]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[136]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[137]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[138]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[45]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[46]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[47]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[64]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[48]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CA_MainLoop
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[35]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[37]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[139]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler_UsrPart
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_SRaw_Filter
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
</UL>

<P><STRONG><a name="[13c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[54]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
</UL>

<P><STRONG><a name="[57]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[56]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[141]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
</UL>

<P><STRONG><a name="[142]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[143]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[144]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[49]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[4c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[5f]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[5d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[60]"></a>__fpl_cmpreturn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[61]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[39]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[62]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[145]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[146]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>ALSensor_CMP201_InitSetup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usr_alsensor.o(i.ALSensor_CMP201_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ALSensor_CMP201_InitSetup &rArr; cmp201_software_reset_process &rArr; cmp201_burst_write &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_software_reset_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_initialization
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_enable_PT_meas
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
</UL>

<P><STRONG><a name="[6b]"></a>ALSensor_CMP201_MainLoop</STRONG> (Thumb, 716 bytes, Stack size 16 bytes, usr_alsensor.o(i.ALSensor_CMP201_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ALSensor_CMP201_MainLoop &rArr; ALSensor_CMP201_InitSetup &rArr; cmp201_software_reset_process &rArr; cmp201_burst_write &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_InitSetup
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>ALSensor_TH_MainLoop</STRONG> (Thumb, 810 bytes, Stack size 24 bytes, usr_alsensor.o(i.ALSensor_TH_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ALSensor_TH_MainLoop &rArr; HDC3020_ReadID &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ReadID
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ReadTH
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ConvertStart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>CAN0Err_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Err_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[a0]"></a>CAN0Rec_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Rec_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[a4]"></a>CAN0Trx_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Trx_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[a2]"></a>CAN0Wup_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Wup_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[7a]"></a>CLK_GetCoreFreq</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, system_bat32a237.o(i.CLK_GetCoreFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[73]"></a>HDC3020_ConvertStart</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usr_hdc3020.o(i.HDC3020_ConvertStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HDC3020_ConvertStart &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[72]"></a>HDC3020_ReadID</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_i2c.o(i.HDC3020_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HDC3020_ReadID &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[74]"></a>HDC3020_ReadTH</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usr_hdc3020.o(i.HDC3020_ReadTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HDC3020_ReadTH &rArr; i2c_burst_read &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[f3]"></a>IIC20_Stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sci.o(i.IIC20_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_sendend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_receiveend
</UL>

<P><STRONG><a name="[f6]"></a>IIC20_StopCondition</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sci.o(i.IIC20_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC20_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[f8]"></a>IIC21_Stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sci.o(i.IIC21_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_sendend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_receiveend
</UL>

<P><STRONG><a name="[fb]"></a>IIC21_StopCondition</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sci.o(i.IIC21_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC21_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[102]"></a>IICA0_Clear_Wakeup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iica.o(i.IICA0_Clear_Wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
</UL>

<P><STRONG><a name="[d9]"></a>IICA0_Init</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, iica.o(i.IICA0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CA_InitSetup
</UL>

<P><STRONG><a name="[b]"></a>IRQ00_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ00_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ00_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvi_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ01_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ01_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ01_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp6_interrupt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ02_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ02_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ02_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp7_interrupt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ03_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ03_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ03_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp8_interrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ04_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ04_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ04_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp9_interrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ05_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ05_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ05_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp4_interrupt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp10_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ06_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ06_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ06_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp5_interrupt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp11_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ07_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ07_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ07_Handler &rArr; iic20_interrupt &rArr; IIC20_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ08_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ08_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ08_Handler &rArr; iic21_interrupt &rArr; IIC21_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ09_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ09_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ09_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre2_interrupt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Err_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ10_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ10_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ11_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ11_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ12_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ12_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm01h_interrupt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ13_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ13_Handler &rArr; uart1_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ14_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ14_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ14_Handler &rArr; uart1_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ15_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ15_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ15_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm03h_interrupt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ16_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ16_Handler &rArr; iica0_interrupt &rArr; iica0_slavehandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ17_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ17_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ17_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ18_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ18_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ18_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ19_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ19_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ19_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ20_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ20_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ20_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ21_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ21_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ21_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ22_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ22_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ22_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;it_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ23_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ23_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ23_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_interrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Rec_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ24_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ24_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ24_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp0_interrupt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Wup_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ25_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ25_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ25_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp1_interrupt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Trx_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ26_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ26_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ26_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tma0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ27_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ27_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ27_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ28_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ28_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ28_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ29_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ29_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ29_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmb0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ30_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ30_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ30_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ31_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ31_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ31_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>Mcu_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usr_main.o(i.Mcu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mcu_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>PORT_Init</STRONG> (Thumb, 402 bytes, Stack size 20 bytes, gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GPIO_InitSetup
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetOut
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetIn
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetIn
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetOut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetIn
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>Sample_DelayMs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_main.o(i.Sample_DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SysTick_Handler_UsrPart
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler_UsrPart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>SysTick_Handler_UsrPart</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, usr_interrupt.o(i.SysTick_Handler_UsrPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler_UsrPart
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ac]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>UART0_BaudRate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sci.o(i.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[b3]"></a>UART0_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, sci.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[ed]"></a>UART0_Send</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sci.o(i.UART0_Send))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b4]"></a>UART1_BaudRate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sci.o(i.UART1_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART1_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[b5]"></a>UART1_Init</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, sci.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART1_Init &rArr; UART1_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[b6]"></a>UART1_Start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sci.o(i.UART1_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[b8]"></a>UART2_BaudRate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sci.o(i.UART2_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART2_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[b9]"></a>UART2_Init</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, sci.o(i.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART2_Init &rArr; UART2_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Start
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[ba]"></a>UART2_Start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sci.o(i.UART2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[b2]"></a>UART_BaudRateCal</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, sci.o(i.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BaudRate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRate
</UL>

<P><STRONG><a name="[bc]"></a>Uart_St_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usr_uart.o(i.Uart_St_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_St_Init_s
</UL>

<P><STRONG><a name="[bb]"></a>Uart_St_Init_s</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usr_uart.o(i.Uart_St_Init_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart_St_Init_s
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_St_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>Usr_DFData_To_Variable</STRONG> (Thumb, 392 bytes, Stack size 0 bytes, usr_dataflash.o(i.Usr_DFData_To_Variable))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_DF_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>Usr_DF_InitSetup</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, usr_dataflash.o(i.Usr_DF_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Usr_DF_InitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_DFData_To_Variable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>Usr_DataBits</STRONG> (Thumb, 330 bytes, Stack size 36 bytes, usr_psf.o(i.Usr_DataBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Usr_DataBits &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_TComp_Polynomial_Cubic
</UL>

<P><STRONG><a name="[c4]"></a>Usr_E703_CRC</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, usr_e703.o(i.Usr_E703_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Usr_E703_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>Usr_E703_InitSetup</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = Usr_E703_InitSetup &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_DelayMs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockCMUsr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_CRC
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Print_All_Reg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Print_All_CM
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GetIndex_CM
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_Reset
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_InitSetup
</UL>

<P><STRONG><a name="[cf]"></a>Usr_E703_LockCMFCT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usr_e703.o(i.Usr_E703_LockCMFCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usr_E703_LockCMFCT &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_Reset
</UL>

<P><STRONG><a name="[c8]"></a>Usr_E703_LockCMUsr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usr_e703.o(i.Usr_E703_LockCMUsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usr_E703_LockCMUsr &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_Reset
</UL>

<P><STRONG><a name="[c9]"></a>Usr_E703_LockReg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usr_e703.o(i.Usr_E703_LockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usr_E703_LockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_Reset
</UL>

<P><STRONG><a name="[d0]"></a>Usr_E703_ReadCM</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_E703_ReadCM))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
</UL>

<P><STRONG><a name="[d2]"></a>Usr_E703_ReadData</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Usr_E703_ReadData &rArr; Usr_E703_ReadReg &rArr; i2c_burst_read &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>Usr_E703_ReadReg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_E703_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Usr_E703_ReadReg &rArr; i2c_burst_read &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_RegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
</UL>

<P><STRONG><a name="[ca]"></a>Usr_E703_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usr_e703.o(i.Usr_E703_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Usr_E703_Reset &rArr; Usr_E703_WriteReg &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMFCT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteReg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[c6]"></a>Usr_E703_UnlockCMUsr</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usr_e703.o(i.Usr_E703_UnlockCMUsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usr_E703_UnlockCMUsr &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
</UL>

<P><STRONG><a name="[c5]"></a>Usr_E703_UnlockReg</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usr_e703.o(i.Usr_E703_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[c7]"></a>Usr_E703_WriteCMUsr</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_WriteCMUsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Usr_E703_WriteCMUsr &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockCMUsr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr_Usr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
</UL>

<P><STRONG><a name="[d5]"></a>Usr_E703_WriteReg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Usr_E703_WriteReg &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_RegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_Reset
</UL>

<P><STRONG><a name="[d7]"></a>Usr_GPIO_InitSetup</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, usr_gpio.o(i.Usr_GPIO_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_GPIO_InitSetup &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>Usr_GetIndex_CM</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, usr_e703.o(i.Usr_GetIndex_CM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Usr_GetIndex_CM
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
</UL>

<P><STRONG><a name="[d8]"></a>Usr_I2CA_InitSetup</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usr_i2ca_slave.o(i.Usr_I2CA_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usr_I2CA_InitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICA0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>Usr_I2CA_MainLoop</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, usr_i2ca_slave.o(i.Usr_I2CA_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Usr_I2CA_MainLoop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>Usr_I2CS_InitSetup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_i2c.o(i.Usr_I2CS_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = Usr_I2CS_InitSetup &rArr; Usr_E703_InitSetup &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>Usr_IIC1_SCL_Set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC1_SCL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[fd]"></a>Usr_IIC1_SDA_Set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[dc]"></a>Usr_IIC1_SDA_SetIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_SetIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_IIC1_SDA_SetIn &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[dd]"></a>Usr_IIC1_SDA_SetOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_IIC1_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[fc]"></a>Usr_IIC1_SDA_State</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_State))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[e5]"></a>Usr_IIC2_SCL_Set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC2_SCL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[ff]"></a>Usr_IIC2_SDA_Set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[de]"></a>Usr_IIC2_SDA_SetIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_SetIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_IIC2_SDA_SetIn &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[df]"></a>Usr_IIC2_SDA_SetOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_IIC2_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[fe]"></a>Usr_IIC2_SDA_State</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_State))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[e6]"></a>Usr_IIC3_SCL_Set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC3_SCL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[101]"></a>Usr_IIC3_SDA_Set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[e0]"></a>Usr_IIC3_SDA_SetIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_SetIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_IIC3_SDA_SetIn &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[e1]"></a>Usr_IIC3_SDA_SetOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[100]"></a>Usr_IIC3_SDA_State</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_State))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[e4]"></a>Usr_IIC_DelayUs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC_DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[d1]"></a>Usr_Is_CMAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Is_CMAddr))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GetIndex_CM
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[d6]"></a>Usr_Is_CMAddr_Usr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Is_CMAddr_Usr))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Write_CMUsr_Of_Claus
</UL>

<P><STRONG><a name="[d4]"></a>Usr_Is_RegAddr</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Is_RegAddr))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteReg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
</UL>

<P><STRONG><a name="[ce]"></a>Usr_Print_All_CM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Print_All_CM))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[cd]"></a>Usr_Print_All_Reg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Print_All_Reg))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[c3]"></a>Usr_Read_All_CM</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_Read_All_CM))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>Usr_Read_All_Reg</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_Read_All_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Usr_Read_All_Reg &rArr; Usr_E703_ReadReg &rArr; i2c_burst_read &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_RegAddr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>Usr_SRaw_Filter</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usr_psf.o(i.Usr_SRaw_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Usr_SRaw_Filter
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Usr_Soft_IIC_Init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_Soft_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Usr_Soft_IIC_Init &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC_DelayUs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_InitSetup
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
</UL>

<P><STRONG><a name="[e7]"></a>Usr_TComp_Polynomial_Cubic</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, usr_psf.o(i.Usr_TComp_Polynomial_Cubic))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Usr_TComp_Polynomial_Cubic &rArr; Usr_DataBits &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_DataBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>Usr_Uart_Init</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, usr_uart.o(i.Usr_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usr_Uart_Init &rArr; UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_InitSetup
</UL>

<P><STRONG><a name="[eb]"></a>Usr_Uart_InitSetup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usr_uart.o(i.Usr_Uart_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Usr_Uart_InitSetup &rArr; Usr_Uart_Init &rArr; UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>Usr_Write_CMUsr_Of_Claus</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_Write_CMUsr_Of_Claus))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Usr_Write_CMUsr_Of_Claus &rArr; Usr_E703_WriteCMUsr &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockCMUsr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr_Usr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GetIndex_CM
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[6c]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_DataBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>

<P><STRONG><a name="[4f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[42]"></a>_sys_exit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[9c]"></a>adc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.adc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>

<P><STRONG><a name="[a1]"></a>cmp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.cmp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[a3]"></a>cmp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.cmp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[6e]"></a>cmp201_burst_read</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, usr_cmp201.o(i.cmp201_burst_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cmp201_burst_read &rArr; i2c_burst_read &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_initialization
</UL>

<P><STRONG><a name="[ec]"></a>cmp201_burst_write</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, usr_cmp201.o(i.cmp201_burst_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cmp201_burst_write &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_software_reset_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_initialization
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_enable_PT_meas
</UL>

<P><STRONG><a name="[6a]"></a>cmp201_enable_PT_meas</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usr_cmp201.o(i.cmp201_enable_PT_meas))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cmp201_enable_PT_meas &rArr; cmp201_burst_write &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_InitSetup
</UL>

<P><STRONG><a name="[69]"></a>cmp201_initialization</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usr_cmp201.o(i.cmp201_initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cmp201_initialization &rArr; cmp201_burst_write &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_write
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_read
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_InitSetup
</UL>

<P><STRONG><a name="[68]"></a>cmp201_software_reset_process</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usr_cmp201.o(i.cmp201_software_reset_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cmp201_software_reset_process &rArr; cmp201_burst_write &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_InitSetup
</UL>

<P><STRONG><a name="[97]"></a>div_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.div_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[5e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>i2c_burst_read</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, usr_soft_i2c.o(i.i2c_burst_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_burst_read &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ReadID
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ReadTH
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[7b]"></a>i2c_burst_write</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, usr_soft_i2c.o(i.i2c_burst_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ReadID
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMFCT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockCMUsr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp201_burst_write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC3020_ConvertStart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[8a]"></a>iic20_interrupt</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, sci_user.o(i.iic20_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic20_interrupt &rArr; IIC20_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_StopCondition
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_sendend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_receiveend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_error
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>

<P><STRONG><a name="[8b]"></a>iic21_interrupt</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, sci_user.o(i.iic21_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic21_interrupt &rArr; IIC21_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_StopCondition
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_sendend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_receiveend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_error
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>

<P><STRONG><a name="[f0]"></a>iic_receive_8bit</STRONG> (Thumb, 708 bytes, Stack size 16 bytes, usr_soft_i2c.o(i.iic_receive_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iic_receive_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC_DelayUs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_State
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetOut
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetIn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_State
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetIn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_State
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetOut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetIn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[ef]"></a>iic_send_8bit</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, usr_soft_i2c.o(i.iic_send_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC_DelayUs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_State
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetOut
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetIn
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_State
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetIn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_State
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetOut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetIn
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[ee]"></a>iic_start_signal</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.iic_start_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_start_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC_DelayUs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[f1]"></a>iic_stop_signal</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.iic_stop_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_stop_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC_DelayUs
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[96]"></a>iica0_interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iica_user.o(i.iica0_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iica0_interrupt &rArr; iica0_slavehandler
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_slavehandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_masterhandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICA0_Clear_Wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[7e]"></a>intp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[87]"></a>intp10_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp10_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[89]"></a>intp11_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp11_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[80]"></a>intp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[82]"></a>intp2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[84]"></a>intp3_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[86]"></a>intp4_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp4_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[88]"></a>intp5_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp5_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[7f]"></a>intp6_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp6_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[81]"></a>intp7_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp7_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[83]"></a>intp8_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp8_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[85]"></a>intp9_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp9_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[9e]"></a>it_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.it_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[9f]"></a>key_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.key_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[7d]"></a>lvi_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.lvi_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 800 bytes, Stack size 8 bytes, usr_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = main &rArr; flash_write &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_InitSetup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_TComp_Polynomial_Cubic
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_SRaw_Filter
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_InitSetup
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CA_MainLoop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CA_InitSetup
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GPIO_InitSetup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMFCT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_DF_InitSetup
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_DFData_To_Variable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_St_Init_s
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_CMP201_MainLoop
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sample_DelayMs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_WriteCMUsr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockCMUsr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_CRC
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9d]"></a>rtc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.rtc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[90]"></a>sre0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[94]"></a>sre1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[8c]"></a>sre2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[91]"></a>tm01h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm01h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[95]"></a>tm03h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm03h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[98]"></a>tm40_channel0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>

<P><STRONG><a name="[99]"></a>tm40_channel1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>

<P><STRONG><a name="[9a]"></a>tm40_channel2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>

<P><STRONG><a name="[9b]"></a>tm40_channel3_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>

<P><STRONG><a name="[a5]"></a>tma0_interrupt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tima_user.o(i.tma0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>

<P><STRONG><a name="[a8]"></a>tmb0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmb0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>

<P><STRONG><a name="[a9]"></a>tmc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>

<P><STRONG><a name="[a6]"></a>tmm0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmm0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>

<P><STRONG><a name="[a7]"></a>tmm1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmm1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>

<P><STRONG><a name="[8f]"></a>uart0_interrupt_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.uart0_interrupt_receive))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>

<P><STRONG><a name="[8e]"></a>uart0_interrupt_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.uart0_interrupt_send))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>

<P><STRONG><a name="[93]"></a>uart1_interrupt_receive</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sci_user.o(i.uart1_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart1_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_callback_softwareoverrun
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_callback_receiveend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_callback_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[92]"></a>uart1_interrupt_send</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sci_user.o(i.uart1_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_callback_sendend
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>

<P><STRONG><a name="[43]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[149]"></a>EraseChip</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, flash.o(ram_fetch_code), UNUSED)

<P><STRONG><a name="[10b]"></a>EraseSector</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, flash.o(ram_fetch_code))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>ProgramPage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(ram_fetch_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProgramPage
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[aa]"></a>flash_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_user.o(ram_fetch_code))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>

<P><STRONG><a name="[10c]"></a>flash_write</STRONG> (Thumb, 298 bytes, Stack size 1088 bytes, flash_user.o(ram_fetch_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = flash_write &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[112]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALSensor_TH_MainLoop
</UL>

<P><STRONG><a name="[113]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b7]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sci.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Start
</UL>

<P><STRONG><a name="[f5]"></a>iic20_callback_master_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.iic20_callback_master_error))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[f2]"></a>iic20_callback_master_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic20_callback_master_receiveend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic20_callback_master_receiveend
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[f4]"></a>iic20_callback_master_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic20_callback_master_sendend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic20_callback_master_sendend
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[fa]"></a>iic21_callback_master_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.iic21_callback_master_error))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[f7]"></a>iic21_callback_master_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic21_callback_master_receiveend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic21_callback_master_receiveend
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[f9]"></a>iic21_callback_master_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic21_callback_master_sendend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic21_callback_master_sendend
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[10d]"></a>uart1_callback_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart1_callback_error))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_receive
</UL>

<P><STRONG><a name="[10e]"></a>uart1_callback_receiveend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart1_callback_receiveend))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_receive
</UL>

<P><STRONG><a name="[110]"></a>uart1_callback_sendend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart1_callback_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
</UL>

<P><STRONG><a name="[10f]"></a>uart1_callback_softwareoverrun</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart1_callback_softwareoverrun))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_receive
</UL>

<P><STRONG><a name="[105]"></a>iica0_callback_master_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_master_error))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_masterhandler
</UL>

<P><STRONG><a name="[107]"></a>iica0_callback_master_receiveend</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_master_receiveend))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_masterhandler
</UL>

<P><STRONG><a name="[106]"></a>iica0_callback_master_sendend</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_master_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_masterhandler
</UL>

<P><STRONG><a name="[10a]"></a>iica0_callback_slave_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_slave_error))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_slavehandler
</UL>

<P><STRONG><a name="[109]"></a>iica0_callback_slave_receiveend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_slave_receiveend))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_slavehandler
</UL>

<P><STRONG><a name="[108]"></a>iica0_callback_slave_sendend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_slave_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_slavehandler
</UL>

<P><STRONG><a name="[103]"></a>iica0_masterhandler</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, iica_user.o(i.iica0_masterhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iica0_masterhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_master_sendend
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_master_receiveend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_master_error
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
</UL>

<P><STRONG><a name="[104]"></a>iica0_slavehandler</STRONG> (Thumb, 1346 bytes, Stack size 8 bytes, iica_user.o(i.iica0_slavehandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iica0_slavehandler
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_slave_sendend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_slave_receiveend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_slave_error
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
</UL>

<P><STRONG><a name="[ae]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usr_main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[e9]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usr_uart.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[ea]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usr_uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[53]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[52]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
