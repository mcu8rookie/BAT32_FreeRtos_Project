<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BAT32_FreeRTOS_Proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BAT32_FreeRTOS_Proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Mon Jan 20 18:18:31 2025
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3]">HardFault_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[7]">IRQ00_Handler</a> from isr_bat32a237.o(i.IRQ00_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[8]">IRQ01_Handler</a> from isr_bat32a237.o(i.IRQ01_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[9]">IRQ02_Handler</a> from isr_bat32a237.o(i.IRQ02_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[a]">IRQ03_Handler</a> from isr_bat32a237.o(i.IRQ03_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[b]">IRQ04_Handler</a> from isr_bat32a237.o(i.IRQ04_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[c]">IRQ05_Handler</a> from isr_bat32a237.o(i.IRQ05_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[d]">IRQ06_Handler</a> from isr_bat32a237.o(i.IRQ06_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[e]">IRQ07_Handler</a> from isr_bat32a237.o(i.IRQ07_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[f]">IRQ08_Handler</a> from isr_bat32a237.o(i.IRQ08_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[10]">IRQ09_Handler</a> from isr_bat32a237.o(i.IRQ09_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[11]">IRQ10_Handler</a> from isr_bat32a237.o(i.IRQ10_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[12]">IRQ11_Handler</a> from isr_bat32a237.o(i.IRQ11_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[13]">IRQ12_Handler</a> from isr_bat32a237.o(i.IRQ12_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[14]">IRQ13_Handler</a> from isr_bat32a237.o(i.IRQ13_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[15]">IRQ14_Handler</a> from isr_bat32a237.o(i.IRQ14_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[16]">IRQ15_Handler</a> from isr_bat32a237.o(i.IRQ15_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[17]">IRQ16_Handler</a> from isr_bat32a237.o(i.IRQ16_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[18]">IRQ17_Handler</a> from isr_bat32a237.o(i.IRQ17_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[19]">IRQ18_Handler</a> from isr_bat32a237.o(i.IRQ18_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1a]">IRQ19_Handler</a> from isr_bat32a237.o(i.IRQ19_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1b]">IRQ20_Handler</a> from isr_bat32a237.o(i.IRQ20_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1c]">IRQ21_Handler</a> from isr_bat32a237.o(i.IRQ21_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1d]">IRQ22_Handler</a> from isr_bat32a237.o(i.IRQ22_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1e]">IRQ23_Handler</a> from isr_bat32a237.o(i.IRQ23_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1f]">IRQ24_Handler</a> from isr_bat32a237.o(i.IRQ24_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[20]">IRQ25_Handler</a> from isr_bat32a237.o(i.IRQ25_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[21]">IRQ26_Handler</a> from isr_bat32a237.o(i.IRQ26_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[22]">IRQ27_Handler</a> from isr_bat32a237.o(i.IRQ27_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[23]">IRQ28_Handler</a> from isr_bat32a237.o(i.IRQ28_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[24]">IRQ29_Handler</a> from isr_bat32a237.o(i.IRQ29_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[25]">IRQ30_Handler</a> from isr_bat32a237.o(i.IRQ30_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[26]">IRQ31_Handler</a> from isr_bat32a237.o(i.IRQ31_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_bat32a237.o(i.SystemInit) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[2a]">Usr_Task_I2CS</a> from usr_i2ca_task.o(i.Usr_Task_I2CS) referenced from usr_i2ca_task.o(i.Usr_Create_I2C20_Task)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[2b]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[27]">main</a> from usr_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2d]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[2c]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[2e]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[100]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[101]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[102]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[103]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[104]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f5]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6d]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[6f]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[33]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[34]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[35]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[109]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[10a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>CAN0Err_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Err_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[5f]"></a>CAN0Rec_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Rec_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[63]"></a>CAN0Trx_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Trx_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[61]"></a>CAN0Wup_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Wup_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[3a]"></a>CLK_GetCoreFreq</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, system_bat32a237.o(i.CLK_GetCoreFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b4]"></a>IIC20_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sci.o(i.IIC20_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[b3]"></a>IIC20_StopCondition</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, sci.o(i.IIC20_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IIC20_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[b6]"></a>IIC21_Stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sci.o(i.IIC21_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[b5]"></a>IIC21_StopCondition</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sci.o(i.IIC21_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC21_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[bd]"></a>IICA0_Clear_Wakeup</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iica.o(i.IICA0_Clear_Wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
</UL>

<P><STRONG><a name="[7]"></a>IRQ00_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ00_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ00_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvi_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ01_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ01_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ01_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp6_interrupt
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ02_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ02_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ02_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp7_interrupt
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>IRQ03_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ03_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ03_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp8_interrupt
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ04_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ04_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ04_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp9_interrupt
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ05_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ05_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ05_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp4_interrupt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp10_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ06_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ06_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ06_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp5_interrupt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp11_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ07_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ07_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IRQ07_Handler &rArr; iic20_interrupt &rArr; IIC20_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ08_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ08_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ08_Handler &rArr; iic21_interrupt &rArr; IIC21_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ09_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ09_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ09_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre2_interrupt
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Err_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ10_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ10_Handler &rArr; uart0_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ11_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ11_Handler &rArr; uart0_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ12_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ12_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm01h_interrupt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ13_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ13_Handler &rArr; uart1_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ14_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ14_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ14_Handler &rArr; uart1_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ15_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ15_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ15_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm03h_interrupt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ16_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ16_Handler &rArr; iica0_interrupt &rArr; iica0_slavehandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ17_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ17_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ17_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ18_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ18_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ18_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ19_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ19_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ19_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ20_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ20_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ20_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ21_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ21_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ21_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ22_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ22_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ22_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;it_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ23_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ23_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ23_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_interrupt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Rec_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ24_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ24_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ24_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp0_interrupt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Wup_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ25_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ25_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ25_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp1_interrupt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Trx_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ26_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ26_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ26_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tma0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ27_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ27_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ27_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ28_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ28_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ28_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ29_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ29_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ29_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmb0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ30_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ30_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ30_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ31_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ31_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ31_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>Mcu_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usr_main.o(i.Mcu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mcu_Init &rArr; SystemCoreClockUpdate &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>PORT_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GPIO_InitSetup
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetOut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetIn
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetOut
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetIn
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetOut
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetIn
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
</UL>

<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler_UsrPart
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SysTick_Handler_UsrPart</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usr_interrupt.o(i.SysTick_Handler_UsrPart))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>TMA0_IntervalTimer</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tima.o(i.TMA0_IntervalTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMA0_IntervalTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA0_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[72]"></a>TMA0_Start</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tima.o(i.TMA0_Start))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA0_IntervalTimer
</UL>

<P><STRONG><a name="[73]"></a>UART0_BaudRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sci.o(i.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[75]"></a>UART0_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sci.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[ae]"></a>UART0_Send</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sci.o(i.UART0_Send))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[76]"></a>UART1_BaudRate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sci.o(i.UART1_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART1_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[77]"></a>UART1_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, sci.o(i.UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART1_Init &rArr; UART1_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[78]"></a>UART1_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sci.o(i.UART1_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
</UL>

<P><STRONG><a name="[7a]"></a>UART2_BaudRate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sci.o(i.UART2_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART2_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[7b]"></a>UART2_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sci.o(i.UART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART2_Init &rArr; UART2_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[7c]"></a>UART2_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sci.o(i.UART2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
</UL>

<P><STRONG><a name="[74]"></a>UART_BaudRateCal</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, sci.o(i.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_BaudRate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_BaudRate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>

<P><STRONG><a name="[7f]"></a>Uart_St_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usr_uart.o(i.Uart_St_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_St_Init_s
</UL>

<P><STRONG><a name="[7e]"></a>Uart_St_Init_s</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usr_uart.o(i.Uart_St_Init_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Uart_St_Init_s
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_St_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>Usr_Create_I2C20_Task</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usr_i2ca_task.o(i.Usr_Create_I2C20_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Usr_Create_I2C20_Task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_Create
</UL>

<P><STRONG><a name="[88]"></a>Usr_E703_CRC</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, usr_e703.o(i.Usr_E703_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Usr_E703_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[85]"></a>Usr_E703_InitSetup</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_E703_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Usr_E703_InitSetup &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMA0_IntervalTimer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_CRC
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_InitSetup
</UL>

<P><STRONG><a name="[89]"></a>Usr_E703_LockCMFCT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_LockCMFCT))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usr_E703_LockCMFCT &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
</UL>

<P><STRONG><a name="[8b]"></a>Usr_E703_LockCMUsr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_LockCMUsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usr_E703_LockCMUsr &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
</UL>

<P><STRONG><a name="[8c]"></a>Usr_E703_LockReg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_LockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usr_E703_LockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
</UL>

<P><STRONG><a name="[8d]"></a>Usr_E703_MainLoop</STRONG> (Thumb, 860 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Usr_E703_MainLoop &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Echo
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMFCT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_MainLoop
</UL>

<P><STRONG><a name="[90]"></a>Usr_E703_ReadCM</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_E703_ReadCM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
</UL>

<P><STRONG><a name="[8e]"></a>Usr_E703_ReadData</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usr_E703_ReadData &rArr; Usr_E703_ReadReg &rArr; i2c_burst_read &rArr; iic_receive_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
</UL>

<P><STRONG><a name="[94]"></a>Usr_E703_ReadReg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usr_e703.o(i.Usr_E703_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Usr_E703_ReadReg &rArr; i2c_burst_read &rArr; iic_receive_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_RegAddr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadData
</UL>

<P><STRONG><a name="[92]"></a>Usr_E703_UnlockReg</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_E703_UnlockReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[96]"></a>Usr_GPIO_InitSetup</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usr_gpio.o(i.Usr_GPIO_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_GPIO_InitSetup &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>Usr_I2CS_InitSetup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usr_i2c.o(i.Usr_I2CS_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Usr_I2CS_InitSetup &rArr; Usr_E703_InitSetup &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_I2CS
</UL>

<P><STRONG><a name="[99]"></a>Usr_I2CS_MainLoop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usr_i2c.o(i.Usr_I2CS_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Usr_I2CS_MainLoop &rArr; Usr_E703_MainLoop &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_I2CS
</UL>

<P><STRONG><a name="[a0]"></a>Usr_IIC1_SCL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC1_SCL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
</UL>

<P><STRONG><a name="[b8]"></a>Usr_IIC1_SDA_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[9a]"></a>Usr_IIC1_SDA_SetIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_SetIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_IIC1_SDA_SetIn &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[9b]"></a>Usr_IIC1_SDA_SetOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_IIC1_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[b7]"></a>Usr_IIC1_SDA_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC1_SDA_State))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[a1]"></a>Usr_IIC2_SCL_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC2_SCL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
</UL>

<P><STRONG><a name="[ba]"></a>Usr_IIC2_SDA_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[9c]"></a>Usr_IIC2_SDA_SetIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_SetIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_IIC2_SDA_SetIn &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[9d]"></a>Usr_IIC2_SDA_SetOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_IIC2_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[b9]"></a>Usr_IIC2_SDA_State</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC2_SDA_State))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[a2]"></a>Usr_IIC3_SCL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC3_SCL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Soft_IIC_Init
</UL>

<P><STRONG><a name="[bc]"></a>Usr_IIC3_SDA_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[9e]"></a>Usr_IIC3_SDA_SetIn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_SetIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_IIC3_SDA_SetIn &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[9f]"></a>Usr_IIC3_SDA_SetOut</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_SetOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[bb]"></a>Usr_IIC3_SDA_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_soft_i2c.o(i.Usr_IIC3_SDA_State))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>

<P><STRONG><a name="[91]"></a>Usr_Is_CMAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Is_CMAddr))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[95]"></a>Usr_Is_RegAddr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usr_e703.o(i.Usr_Is_RegAddr))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
</UL>

<P><STRONG><a name="[87]"></a>Usr_Read_All_CM</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, usr_e703.o(i.Usr_Read_All_CM))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_CMAddr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_CRC
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[86]"></a>Usr_Read_All_Reg</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, usr_e703.o(i.Usr_Read_All_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Usr_Read_All_Reg &rArr; Usr_E703_ReadReg &rArr; i2c_burst_read &rArr; iic_receive_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Is_RegAddr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[98]"></a>Usr_Soft_IIC_Init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.Usr_Soft_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usr_Soft_IIC_Init &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_InitSetup
</UL>

<P><STRONG><a name="[a3]"></a>Usr_Task_Create</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usr_task.o(i.Usr_Task_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Usr_Task_Create &rArr; Usr_Create_I2C20_Task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Create_I2C20_Task
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>Usr_Task_I2CS</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, usr_i2ca_task.o(i.Usr_Task_I2CS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Usr_Task_I2CS &rArr; Usr_I2CS_InitSetup &rArr; Usr_E703_InitSetup &rArr; Usr_Read_All_CM &rArr; Usr_E703_ReadCM &rArr; Usr_E703_UnlockReg &rArr; i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_MainLoop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_I2CS_InitSetup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usr_i2ca_task.o(i.Usr_Create_I2C20_Task)
</UL>
<P><STRONG><a name="[8f]"></a>Usr_Uart_Echo</STRONG> (Thumb, 374 bytes, Stack size 20 bytes, usr_uart.o(i.Usr_Uart_Echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Usr_Uart_Echo
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
</UL>

<P><STRONG><a name="[a6]"></a>Usr_Uart_Init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, usr_uart.o(i.Usr_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Usr_Uart_Init &rArr; UART2_Init &rArr; UART2_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_InitSetup
</UL>

<P><STRONG><a name="[a9]"></a>Usr_Uart_InitSetup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usr_uart.o(i.Usr_Uart_InitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Usr_Uart_InitSetup &rArr; Usr_Uart_Init &rArr; UART2_Init &rArr; UART2_BaudRate &rArr; UART_BaudRateCal &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10d]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[82]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Create_I2C20_Task
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_Create
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_I2CS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[3b]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>

<P><STRONG><a name="[10e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[110]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5b]"></a>adc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.adc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>

<P><STRONG><a name="[60]"></a>cmp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.cmp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[62]"></a>cmp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.cmp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[56]"></a>div_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.div_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[69]"></a>flash_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.flash_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>

<P><STRONG><a name="[2b]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[93]"></a>i2c_burst_read</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, usr_soft_i2c.o(i.i2c_burst_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_burst_read &rArr; iic_receive_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_receive_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
</UL>

<P><STRONG><a name="[8a]"></a>i2c_burst_write</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, usr_soft_i2c.o(i.i2c_burst_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_burst_write &rArr; iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_stop_signal
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_start_signal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_send_8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_UnlockReg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_ReadCM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMUsr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_LockCMFCT
</UL>

<P><STRONG><a name="[49]"></a>iic20_interrupt</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, sci_user.o(i.iic20_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iic20_interrupt &rArr; IIC20_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_StopCondition
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>

<P><STRONG><a name="[4a]"></a>iic21_interrupt</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, sci_user.o(i.iic21_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iic21_interrupt &rArr; IIC21_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_StopCondition
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>

<P><STRONG><a name="[b1]"></a>iic_receive_8bit</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, usr_soft_i2c.o(i.iic_receive_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iic_receive_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_State
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetOut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetIn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_State
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetOut
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetIn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_State
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetOut
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetIn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[b0]"></a>iic_send_8bit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, usr_soft_i2c.o(i.iic_send_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iic_send_8bit &rArr; Usr_IIC3_SDA_SetOut &rArr; PORT_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_State
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetOut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_SetIn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_State
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetOut
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_SetIn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_State
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetOut
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_SetIn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[af]"></a>iic_start_signal</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, usr_soft_i2c.o(i.iic_start_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iic_start_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[b2]"></a>iic_stop_signal</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, usr_soft_i2c.o(i.iic_stop_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = iic_stop_signal
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SDA_Set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC3_SCL_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SDA_Set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC2_SCL_Set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SDA_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_IIC1_SCL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_burst_read
</UL>

<P><STRONG><a name="[55]"></a>iica0_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iica_user.o(i.iica0_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iica0_interrupt &rArr; iica0_slavehandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_slavehandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_masterhandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICA0_Clear_Wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[3d]"></a>intp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[46]"></a>intp10_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp10_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[48]"></a>intp11_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp11_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[3f]"></a>intp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[41]"></a>intp2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[43]"></a>intp3_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[45]"></a>intp4_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp4_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[47]"></a>intp5_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp5_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[3e]"></a>intp6_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp6_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[40]"></a>intp7_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp7_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[42]"></a>intp8_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp8_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[44]"></a>intp9_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp9_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[5d]"></a>it_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.it_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[5e]"></a>key_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.key_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[3c]"></a>lvi_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.lvi_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, usr_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_InitSetup
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_Create
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_GPIO_InitSetup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_St_Init_s
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ea]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[fb]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[da]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[5c]"></a>rtc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.rtc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[4f]"></a>sre0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[53]"></a>sre1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[4b]"></a>sre2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[50]"></a>tm01h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm01h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[54]"></a>tm03h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm03h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[57]"></a>tm40_channel0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>

<P><STRONG><a name="[58]"></a>tm40_channel1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>

<P><STRONG><a name="[59]"></a>tm40_channel2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>

<P><STRONG><a name="[5a]"></a>tm40_channel3_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>

<P><STRONG><a name="[64]"></a>tma0_interrupt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tima_user.o(i.tma0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>

<P><STRONG><a name="[67]"></a>tmb0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmb0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>

<P><STRONG><a name="[68]"></a>tmc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>

<P><STRONG><a name="[65]"></a>tmm0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmm0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>

<P><STRONG><a name="[66]"></a>tmm1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmm1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>

<P><STRONG><a name="[4e]"></a>uart0_interrupt_receive</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, sci_user.o(i.uart0_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart0_interrupt_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>

<P><STRONG><a name="[4d]"></a>uart0_interrupt_send</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sci_user.o(i.uart0_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0_interrupt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>

<P><STRONG><a name="[52]"></a>uart1_interrupt_receive</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sci_user.o(i.uart1_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart1_interrupt_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[51]"></a>uart1_interrupt_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sci_user.o(i.uart1_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_interrupt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>

<P><STRONG><a name="[c4]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f1]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[fe]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[c9]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[d9]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[c6]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[c5]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[c8]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ca]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[d4]"></a>vPortFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[ed]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[cb]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ce]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[e4]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[a5]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_I2CS
</UL>

<P><STRONG><a name="[f8]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[e9]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[ef]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[ee]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[f0]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[c2]"></a>vTaskStartScheduler</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[31]"></a>vTaskSwitchContext</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f4]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a4]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_Create
</UL>

<P><STRONG><a name="[f6]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[cd]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[d7]"></a>xQueueGenericReset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[84]"></a>xQueueGenericSend</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Create_I2C20_Task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_I2CS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[fa]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[e0]"></a>xQueueReceive</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[81]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Create_I2C20_Task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_Reg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Read_All_CM
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Task_I2CS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_MainLoop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_E703_InitSetup
</UL>

<P><STRONG><a name="[f9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[83]"></a>xTaskCreate</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Create_I2C20_Task
</UL>

<P><STRONG><a name="[f2]"></a>xTaskCreateStatic</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[f7]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[e5]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[6e]"></a>xTaskIncrementTick</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[d2]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[fc]"></a>xTaskPriorityInherit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[e8]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[e3]"></a>xTaskResumeAll</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[f3]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[df]"></a>xTimerGenericCommand</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[79]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sci.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Start
</UL>

<P><STRONG><a name="[c0]"></a>iica0_callback_master_sendend</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_master_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_masterhandler
</UL>

<P><STRONG><a name="[c1]"></a>iica0_callback_slave_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iica_user.o(i.iica0_callback_slave_error))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_slavehandler
</UL>

<P><STRONG><a name="[be]"></a>iica0_masterhandler</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, iica_user.o(i.iica0_masterhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iica0_masterhandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_master_sendend
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
</UL>

<P><STRONG><a name="[bf]"></a>iica0_slavehandler</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, iica_user.o(i.iica0_slavehandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iica0_slavehandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_callback_slave_error
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
</UL>

<P><STRONG><a name="[cf]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[d1]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d5]"></a>prvInitialiseMutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[d6]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[dc]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[e7]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[c3]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[c7]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[d3]"></a>prvDeleteTCB</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2d]"></a>prvIdleTask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[d8]"></a>prvInitialiseNewTask</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[fd]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[cc]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[db]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[dd]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[e1]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[de]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[e6]"></a>prvSwitchTimerLists</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[2e]"></a>prvTimerTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[2c]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[eb]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ec]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a7]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usr_uart.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[a8]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usr_uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usr_Uart_Init
</UL>

<P><STRONG><a name="[ab]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[ad]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
