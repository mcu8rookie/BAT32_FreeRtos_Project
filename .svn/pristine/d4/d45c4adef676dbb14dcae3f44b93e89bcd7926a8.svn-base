<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\iicSendReceive.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\iicSendReceive.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Wed Jan 08 13:25:11 2025
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
hard_fault_handler_c &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">HardFault_Handler</a> from main.o(.emb_text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[b]">IRQ00_Handler</a> from isr_bat32a237.o(i.IRQ00_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[c]">IRQ01_Handler</a> from isr_bat32a237.o(i.IRQ01_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[d]">IRQ02_Handler</a> from isr_bat32a237.o(i.IRQ02_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[e]">IRQ03_Handler</a> from isr_bat32a237.o(i.IRQ03_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[f]">IRQ04_Handler</a> from isr_bat32a237.o(i.IRQ04_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[10]">IRQ05_Handler</a> from isr_bat32a237.o(i.IRQ05_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[11]">IRQ06_Handler</a> from isr_bat32a237.o(i.IRQ06_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[12]">IRQ07_Handler</a> from isr_bat32a237.o(i.IRQ07_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[13]">IRQ08_Handler</a> from isr_bat32a237.o(i.IRQ08_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[14]">IRQ09_Handler</a> from isr_bat32a237.o(i.IRQ09_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[15]">IRQ10_Handler</a> from isr_bat32a237.o(i.IRQ10_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[16]">IRQ11_Handler</a> from isr_bat32a237.o(i.IRQ11_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[17]">IRQ12_Handler</a> from isr_bat32a237.o(i.IRQ12_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[18]">IRQ13_Handler</a> from isr_bat32a237.o(i.IRQ13_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[19]">IRQ14_Handler</a> from isr_bat32a237.o(i.IRQ14_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1a]">IRQ15_Handler</a> from isr_bat32a237.o(i.IRQ15_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1b]">IRQ16_Handler</a> from isr_bat32a237.o(i.IRQ16_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1c]">IRQ17_Handler</a> from isr_bat32a237.o(i.IRQ17_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1d]">IRQ18_Handler</a> from isr_bat32a237.o(i.IRQ18_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1e]">IRQ19_Handler</a> from isr_bat32a237.o(i.IRQ19_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[1f]">IRQ20_Handler</a> from isr_bat32a237.o(i.IRQ20_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[20]">IRQ21_Handler</a> from isr_bat32a237.o(i.IRQ21_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[21]">IRQ22_Handler</a> from isr_bat32a237.o(i.IRQ22_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[22]">IRQ23_Handler</a> from isr_bat32a237.o(i.IRQ23_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[23]">IRQ24_Handler</a> from isr_bat32a237.o(i.IRQ24_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[24]">IRQ25_Handler</a> from isr_bat32a237.o(i.IRQ25_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[25]">IRQ26_Handler</a> from isr_bat32a237.o(i.IRQ26_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[26]">IRQ27_Handler</a> from isr_bat32a237.o(i.IRQ27_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[27]">IRQ28_Handler</a> from isr_bat32a237.o(i.IRQ28_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[28]">IRQ29_Handler</a> from isr_bat32a237.o(i.IRQ29_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[29]">IRQ30_Handler</a> from isr_bat32a237.o(i.IRQ30_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2a]">IRQ31_Handler</a> from isr_bat32a237.o(i.IRQ31_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_bat32a237.o(.text) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_bat32a237.o(RESET)
 <LI><a href="#[2c]">SystemInit</a> from system_bat32a237.o(i.SystemInit) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[30]">__main</a> from __main.o(!!!main) referenced from startup_bat32a237.o(.text)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2e]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[2b]">hard_fault_handler_c</a> from main.o(i.hard_fault_handler_c) referenced from main.o(.emb_text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ae]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[34]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[35]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[be]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[32]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[cb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[56]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ce]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[43]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[44]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_bat32a237.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>

<P><STRONG><a name="[36]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[cf]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4d]"></a>getc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getc &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[47]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[51]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>CAN0Err_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Err_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[84]"></a>CAN0Rec_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Rec_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[88]"></a>CAN0Trx_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Trx_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[86]"></a>CAN0Wup_Interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.CAN0Wup_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[57]"></a>CLK_GetCoreFreq</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, system_bat32a237.o(i.CLK_GetCoreFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a1]"></a>IIC20_Init</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, sci.o(i.IIC20_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>IIC20_MasterReceive</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sci.o(i.IIC20_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC20_MasterReceive &rArr; IIC20_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_StartCondition
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>IIC20_MasterSend</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sci.o(i.IIC20_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC20_MasterSend &rArr; IIC20_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_StartCondition
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>IIC20_StartCondition</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sci.o(i.IIC20_StartCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC20_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterSend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterReceive
</UL>

<P><STRONG><a name="[98]"></a>IIC20_Stop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sci.o(i.IIC20_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_sendend
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_receiveend
</UL>

<P><STRONG><a name="[9b]"></a>IIC20_StopCondition</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sci.o(i.IIC20_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC20_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[a2]"></a>IIC21_Init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, sci.o(i.IIC21_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>IIC21_MasterReceive</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sci.o(i.IIC21_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC21_MasterReceive &rArr; IIC21_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_StartCondition
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>IIC21_MasterSend</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sci.o(i.IIC21_MasterSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC21_MasterSend &rArr; IIC21_StartCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_StartCondition
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>IIC21_StartCondition</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sci.o(i.IIC21_StartCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC21_StartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_MasterSend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_MasterReceive
</UL>

<P><STRONG><a name="[9d]"></a>IIC21_Stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sci.o(i.IIC21_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_sendend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_receiveend
</UL>

<P><STRONG><a name="[a0]"></a>IIC21_StopCondition</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sci.o(i.IIC21_StopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC21_StopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[b]"></a>IRQ00_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ00_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ00_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvi_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ01_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ01_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ01_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp6_interrupt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ02_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ02_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ02_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp7_interrupt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ03_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ03_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ03_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp8_interrupt
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ04_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ04_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ04_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp9_interrupt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ05_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ05_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ05_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp4_interrupt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp10_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ06_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ06_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ06_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp5_interrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intp11_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ07_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ07_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ07_Handler &rArr; iic20_interrupt &rArr; IIC20_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ08_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ08_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ08_Handler &rArr; iic21_interrupt &rArr; IIC21_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ09_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ09_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ09_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre2_interrupt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Err_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ10_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ10_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ10_Handler &rArr; uart0_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ11_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ11_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ11_Handler &rArr; uart0_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ12_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ12_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ12_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm01h_interrupt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ13_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ13_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ13_Handler &rArr; spi10_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ14_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ14_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ14_Handler &rArr; spi11_interrupt &rArr; spi11_callback_sendend &rArr; SPI11_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ15_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ15_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ15_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm03h_interrupt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sre1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ16_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ16_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iica0_interrupt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ17_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ17_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ17_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ18_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ18_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ18_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ19_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ19_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ19_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel2_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ20_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ20_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ20_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm40_channel3_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ21_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ21_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ21_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ22_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ22_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ22_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;it_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ23_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ23_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ23_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_interrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Rec_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ24_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ24_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ24_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp0_interrupt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Wup_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ25_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ25_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ25_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp1_interrupt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0Trx_Interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ26_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ26_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ26_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tma0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ27_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ27_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ27_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ28_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ28_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ28_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmm1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ29_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ29_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ29_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmb0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ30_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ30_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ30_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ31_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, isr_bat32a237.o(i.IRQ31_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ31_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SPI11_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sci.o(i.SPI11_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI11_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_callback_sendend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_callback_receiveend
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, system_bat32a237.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; CLK_GetCoreFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_bat32a237.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>UART0_BaudRate</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sci.o(i.UART0_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateCal
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
</UL>

<P><STRONG><a name="[93]"></a>UART0_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, sci.o(i.UART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART0_Init &rArr; UART0_BaudRate &rArr; UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>UART0_Receive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sci.o(i.UART0_Receive))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[96]"></a>UART0_Send</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sci.o(i.UART0_Send))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[92]"></a>UART_BaudRateCal</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, sci.o(i.UART_BaudRateCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_BaudRateCal
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_BaudRate
</UL>

<P><STRONG><a name="[58]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_bat32a237.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCoreFreq
</UL>

<P><STRONG><a name="[4b]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[80]"></a>adc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.adc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>

<P><STRONG><a name="[85]"></a>cmp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.cmp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>

<P><STRONG><a name="[87]"></a>cmp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.cmp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>

<P><STRONG><a name="[7b]"></a>div_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.div_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[52]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4e]"></a>fgetc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, retarget.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[8e]"></a>flash_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.flash_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>

<P><STRONG><a name="[2e]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>hard_fault_handler_c</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(i.hard_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = hard_fault_handler_c &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.emb_text)
</UL>
<P><STRONG><a name="[6e]"></a>iic20_interrupt</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, sci_user.o(i.iic20_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic20_interrupt &rArr; IIC20_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_StopCondition
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_sendend
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_receiveend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_callback_master_error
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ07_Handler
</UL>

<P><STRONG><a name="[6f]"></a>iic21_interrupt</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, sci_user.o(i.iic21_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic21_interrupt &rArr; IIC21_StopCondition
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_StopCondition
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_sendend
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_receiveend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_callback_master_error
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ08_Handler
</UL>

<P><STRONG><a name="[7a]"></a>iica0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.iica0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>

<P><STRONG><a name="[62]"></a>intp0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[6b]"></a>intp10_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp10_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[6d]"></a>intp11_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp11_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[64]"></a>intp1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[66]"></a>intp2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[68]"></a>intp3_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[6a]"></a>intp4_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp4_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ05_Handler
</UL>

<P><STRONG><a name="[6c]"></a>intp5_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp5_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ06_Handler
</UL>

<P><STRONG><a name="[63]"></a>intp6_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp6_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ01_Handler
</UL>

<P><STRONG><a name="[65]"></a>intp7_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp7_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ02_Handler
</UL>

<P><STRONG><a name="[67]"></a>intp8_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp8_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ03_Handler
</UL>

<P><STRONG><a name="[69]"></a>intp9_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.intp9_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ04_Handler
</UL>

<P><STRONG><a name="[82]"></a>it_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.it_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[83]"></a>key_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.key_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>

<P><STRONG><a name="[61]"></a>lvi_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.lvi_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ00_Handler
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = main &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_MasterSend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_MasterReceive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterSend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterReceive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[81]"></a>rtc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.rtc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>

<P><STRONG><a name="[76]"></a>spi10_interrupt</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, sci_user.o(i.spi10_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi10_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_callback_sendend
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_callback_receiveend
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_callback_error
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>

<P><STRONG><a name="[77]"></a>spi11_interrupt</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, sci_user.o(i.spi11_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi11_interrupt &rArr; spi11_callback_sendend &rArr; SPI11_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_callback_sendend
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_callback_receiveend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_callback_error
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>

<P><STRONG><a name="[74]"></a>sre0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[78]"></a>sre1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[70]"></a>sre2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.sre2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ09_Handler
</UL>

<P><STRONG><a name="[75]"></a>tm01h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm01h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>

<P><STRONG><a name="[79]"></a>tm03h_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm03h_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>

<P><STRONG><a name="[7c]"></a>tm40_channel0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>

<P><STRONG><a name="[7d]"></a>tm40_channel1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>

<P><STRONG><a name="[7e]"></a>tm40_channel2_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel2_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>

<P><STRONG><a name="[7f]"></a>tm40_channel3_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tm40_channel3_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>

<P><STRONG><a name="[89]"></a>tma0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tma0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>

<P><STRONG><a name="[8c]"></a>tmb0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmb0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>

<P><STRONG><a name="[8d]"></a>tmc_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmc_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>

<P><STRONG><a name="[8a]"></a>tmm0_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmm0_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>

<P><STRONG><a name="[8b]"></a>tmm1_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, isr_bat32a237.o(i.tmm1_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>

<P><STRONG><a name="[73]"></a>uart0_interrupt_receive</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sci_user.o(i.uart0_interrupt_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart0_interrupt_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_callback_softwareoverrun
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_callback_receiveend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_callback_error
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>

<P><STRONG><a name="[72]"></a>uart0_interrupt_send</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sci_user.o(i.uart0_interrupt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0_interrupt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_callback_sendend
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sci.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI11_Stop
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_MasterSend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_MasterReceive
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterSend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterReceive
</UL>

<P><STRONG><a name="[5c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sci.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterSend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_MasterReceive
</UL>

<P><STRONG><a name="[9a]"></a>iic20_callback_master_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.iic20_callback_master_error))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[97]"></a>iic20_callback_master_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic20_callback_master_receiveend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic20_callback_master_receiveend
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[99]"></a>iic20_callback_master_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic20_callback_master_sendend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic20_callback_master_sendend
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC20_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic20_interrupt
</UL>

<P><STRONG><a name="[9f]"></a>iic21_callback_master_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.iic21_callback_master_error))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[9c]"></a>iic21_callback_master_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic21_callback_master_receiveend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic21_callback_master_receiveend
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[9e]"></a>iic21_callback_master_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.iic21_callback_master_sendend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic21_callback_master_sendend
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC21_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic21_interrupt
</UL>

<P><STRONG><a name="[a3]"></a>spi10_callback_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.spi10_callback_error))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_interrupt
</UL>

<P><STRONG><a name="[a4]"></a>spi10_callback_receiveend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sci_user.o(i.spi10_callback_receiveend))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_interrupt
</UL>

<P><STRONG><a name="[a5]"></a>spi10_callback_sendend</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sci_user.o(i.spi10_callback_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi10_interrupt
</UL>

<P><STRONG><a name="[a8]"></a>spi11_callback_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.spi11_callback_error))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_interrupt
</UL>

<P><STRONG><a name="[a6]"></a>spi11_callback_receiveend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.spi11_callback_receiveend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi11_callback_receiveend &rArr; SPI11_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI11_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_interrupt
</UL>

<P><STRONG><a name="[a7]"></a>spi11_callback_sendend</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sci_user.o(i.spi11_callback_sendend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi11_callback_sendend &rArr; SPI11_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI11_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi11_interrupt
</UL>

<P><STRONG><a name="[a9]"></a>uart0_callback_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart0_callback_error))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>

<P><STRONG><a name="[aa]"></a>uart0_callback_receiveend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart0_callback_receiveend))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>

<P><STRONG><a name="[ac]"></a>uart0_callback_sendend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart0_callback_sendend))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_send
</UL>

<P><STRONG><a name="[ab]"></a>uart0_callback_softwareoverrun</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sci_user.o(i.uart0_callback_softwareoverrun))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_interrupt_receive
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[50]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4f]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[48]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<HR></body></html>
